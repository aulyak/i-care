/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/leveraging.js":
/*!************************************!*\
  !*** ./resources/js/leveraging.js ***!
  \************************************/
/***/ (() => {

eval("var dt = luxon.DateTime;\n$(document).ready(function () {\n  setInterval(function () {\n    var now = dt.now();\n    var currentDtReadable = now.toLocaleString({\n      weekday: 'long',\n      month: 'long',\n      day: '2-digit',\n      year: 'numeric'\n    });\n    var localTime = now.toFormat('HH:mm');\n    $('.date').text(currentDtReadable);\n    $('.time').text(localTime);\n  }, 1000);\n  $('#example2').DataTable({\n    \"paging\": true,\n    \"lengthChange\": false,\n    \"searching\": false,\n    \"ordering\": true,\n    \"info\": true,\n    \"autoWidth\": true,\n    // \"responsive\": true,\n    \"scrollX\": true,\n    \"pageLength\": 3\n    // \"lengthMenu\": [ [10, 25, 50, -1], [10, 25, 50, \"All\"] ],\n    // \"pageLength\": 50\n  });\n\n  $('#arpuxSpeed').DataTable({\n    \"paging\": true,\n    \"lengthChange\": false,\n    \"searching\": false,\n    \"ordering\": true,\n    \"info\": true,\n    \"autoWidth\": true,\n    // \"responsive\": true,\n    \"scrollX\": true,\n    \"pageLength\": 10\n    // \"lengthMenu\": [ [10, 25, 50, -1], [10, 25, 50, \"All\"] ],\n    // \"pageLength\": 50\n  });\n\n  var areaChartData = {\n    labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n    datasets: [{\n      label: '1P-INTERNET (INTERNET)',\n      backgroundColor: 'rgba(60,141,188,0.9)',\n      borderColor: 'rgba(60,141,188,0.8)',\n      pointRadius: false,\n      pointColor: '#3b8bba',\n      pointStrokeColor: 'rgba(60,141,188,1)',\n      pointHighlightFill: '#fff',\n      pointHighlightStroke: 'rgba(60,141,188,1)',\n      data: [28, 48, 40, 19, 86, 27, 90]\n    }, {\n      label: '2P (POTS-INTERNET)',\n      backgroundColor: 'rgba(210, 214, 222, 1)',\n      borderColor: 'rgba(210, 214, 222, 1)',\n      pointRadius: false,\n      pointColor: 'rgba(210, 214, 222, 1)',\n      pointStrokeColor: '#c1c7d1',\n      pointHighlightFill: '#fff',\n      pointHighlightStroke: 'rgba(220,220,220,1)',\n      data: [65, 59, 80, 81, 56, 55, 40]\n    }]\n  };\n  var areaChartOptions = {\n    maintainAspectRatio: false,\n    responsive: true,\n    legend: {\n      display: false\n    },\n    scales: {\n      xAxes: [{\n        gridLines: {\n          display: false\n        }\n      }],\n      yAxes: [{\n        gridLines: {\n          display: false\n        }\n      }]\n    }\n  };\n\n  // This will get the first returned node in the jQuery collection.\n  // new Chart(areaChartCanvas, {\n  //   type: 'line',\n  //   data: areaChartData,\n  //   options: areaChartOptions\n  // })\n\n  //-------------\n  //- LINE CHART -\n  //--------------\n  // var lineChartCanvas = $('#lineChart').get(0).getContext('2d')\n  // var lineChartOptions = $.extend(true, {}, areaChartOptions)\n  // var lineChartData = $.extend(true, {}, areaChartData)\n  // lineChartData.datasets[0].fill = false;\n  // lineChartData.datasets[1].fill = false;\n  // lineChartOptions.datasetFill = false\n\n  // var lineChart = new Chart(lineChartCanvas, {\n  //   type: 'line',\n  //   data: lineChartData,\n  //   options: lineChartOptions\n  // })\n\n  //-------------\n  //- DONUT CHART -\n  //-------------\n  // Get context with jQuery - using jQuery's .get() method.\n  // var donutChartCanvas = $('#donutChart').get(0).getContext('2d')\n  var donutData = {\n    labels: ['1P INET', '2P (POTS-INET)', '3P', 'HOMEWIFI'],\n    datasets: [{\n      data: [700, 500, 400, 600],\n      backgroundColor: ['#d2691e', '#28a745', '#007bff', '#dc3545']\n    }]\n  };\n  // var donutOptions     = {\n  //   maintainAspectRatio : false,\n  //   responsive : true,\n  // }\n  //Create pie or douhnut chart\n  // You can switch between pie and douhnut using the method below.\n  // new Chart(donutChartCanvas, {\n  //   type: 'doughnut',\n  //   data: donutData,\n  //   options: donutOptions\n  // })\n\n  //-------------\n  //- PIE CHART -\n  //-------------\n  // Get context with jQuery - using jQuery's .get() method.\n  var pieChartCanvas = $('#pieChart').get(0).getContext('2d');\n  var pieData = donutData;\n  var pieOptions = {\n    maintainAspectRatio: false,\n    responsive: true\n  };\n  //Create pie or douhnut chart\n  // You can switch between pie and douhnut using the method below.\n  new Chart(pieChartCanvas, {\n    type: 'pie',\n    data: pieData,\n    options: pieOptions\n  });\n\n  //-------------\n  //- BAR CHART -\n  //-------------\n  var barChartCanvas = $('#barChart').get(0).getContext('2d');\n  var barChartData = $.extend(true, {}, areaChartData);\n  var temp0 = areaChartData.datasets[0];\n  var temp1 = areaChartData.datasets[1];\n  barChartData.datasets[0] = temp1;\n  barChartData.datasets[1] = temp0;\n  var barChartOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    datasetFill: false\n  };\n  new Chart(barChartCanvas, {\n    type: 'bar',\n    data: barChartData,\n    options: {\n      barChartOptions: barChartOptions,\n      indexAxis: 'y'\n    }\n  });\n\n  //---------------------\n  //- STACKED BAR CHART -\n  //---------------------\n  // var stackedBarChartCanvas = $('#stackedBarChart').get(0).getContext('2d')\n  // var stackedBarChartData = $.extend(true, {}, barChartData)\n\n  // var stackedBarChartOptions = {\n  //   responsive              : true,\n  //   maintainAspectRatio     : false,\n  //   scales: {\n  //     xAxes: [{\n  //       stacked: true,\n  //     }],\n  //     yAxes: [{\n  //       stacked: true\n  //     }]\n  //   }\n  // }\n\n  // new Chart(stackedBarChartCanvas, {\n  //   type: 'bar',\n  //   data: stackedBarChartData,\n  //   options: stackedBarChartOptions\n  // })\n\n  // Horizontal Bar\n  var horizontalBarChart = new Chart(horizontalBarChartCanvas, {\n    type: 'horizontalBar',\n    data: {\n      labels: [\"< 200GB\", \"200GB - 350GB\", \"350GB - 700GB\", \">= 750GB\"],\n      datasets: [{\n        data: [93038, 88644, 110452, 40000],\n        backgroundColor: [\"#73BFB8\", \"#73BFB8\", \"#73BFB8\", \"#73BFB8\"]\n      }]\n    },\n    options: {\n      tooltips: {\n        enabled: false\n      },\n      responsive: true,\n      legend: {\n        display: false,\n        position: 'bottom',\n        fullWidth: true,\n        labels: {\n          boxWidth: 10,\n          padding: 50\n        }\n      },\n      scales: {\n        yAxes: [{\n          barPercentage: 0.75,\n          ticks: {\n            fontColor: '#555759',\n            fontFamily: 'Lato',\n            fontSize: 11\n          }\n        }],\n        xAxes: [{\n          gridLines: {\n            display: true,\n            drawTicks: false,\n            tickMarkLength: 5,\n            drawBorder: false\n          },\n          ticks: {\n            padding: 5,\n            beginAtZero: true,\n            fontColor: '#555759',\n            fontFamily: 'Lato',\n            fontSize: 11,\n            callback: function callback(label, index, labels) {\n              return label / 1000;\n            }\n          }\n        }]\n      }\n    }\n  });\n  var fuphorizontalBarChart = new Chart(fuphorizontalBarChartCanvas, {\n    type: 'horizontalBar',\n    data: {\n      labels: [\"< FUP\", \"> FUP\", \"NO FUP < 10MBPS\"],\n      datasets: [{\n        data: [270637, 88644, 110452],\n        backgroundColor: [\"#84b5b1\", \"#84b5b1\", \"#84b5b1\"]\n      }]\n    },\n    options: {\n      tooltips: {\n        enabled: false\n      },\n      responsive: true,\n      legend: {\n        display: false,\n        position: 'bottom',\n        fullWidth: true,\n        labels: {\n          boxWidth: 10,\n          padding: 50\n        }\n      },\n      scales: {\n        yAxes: [{\n          barPercentage: 0.75,\n          ticks: {\n            fontColor: '#555759',\n            fontFamily: 'Lato',\n            fontSize: 11\n          }\n        }],\n        xAxes: [{\n          gridLines: {\n            display: true,\n            drawTicks: false,\n            tickMarkLength: 5,\n            drawBorder: false\n          },\n          ticks: {\n            padding: 5,\n            beginAtZero: true,\n            fontColor: '#555759',\n            fontFamily: 'Lato',\n            fontSize: 11,\n            callback: function callback(label, index, labels) {\n              return label / 1000;\n            }\n          }\n        }]\n      }\n    }\n  });\n  var kategoriArpuHorizontalBarChart = new Chart(kategoriArpuHorizontalBarChartCanvas, {\n    type: 'horizontalBar',\n    data: {\n      labels: [\">= 700K\", \"500K-700K\", \"300K-500K\", \"< 300K\"],\n      datasets: [{\n        data: [24099, 54834, 298338, 192444],\n        backgroundColor: [\"#d0605d\", \"#d0605d\", \"#d0605d\", \"#d0605d\"]\n      }]\n    },\n    options: {\n      tooltips: {\n        enabled: false\n      },\n      responsive: true,\n      legend: {\n        display: false,\n        position: 'bottom',\n        fullWidth: true,\n        labels: {\n          boxWidth: 10,\n          padding: 50\n        }\n      },\n      scales: {\n        yAxes: [{\n          barPercentage: 0.75,\n          ticks: {\n            fontColor: '#555759',\n            fontFamily: 'Lato',\n            fontSize: 11\n          }\n        }],\n        xAxes: [{\n          gridLines: {\n            display: true,\n            drawTicks: false,\n            tickMarkLength: 5,\n            drawBorder: false\n          },\n          ticks: {\n            padding: 5,\n            beginAtZero: true,\n            fontColor: '#555759',\n            fontFamily: 'Lato',\n            fontSize: 11,\n            callback: function callback(label, index, labels) {\n              return label / 1000;\n            }\n          }\n        }]\n      }\n    }\n  });\n  var jumlahGangguanhorizontalBarChart = new Chart(jumlahGangguanhorizontalBarChartCanvas, {\n    type: 'horizontalBar',\n    data: {\n      labels: [\"2X - 5X\", \"5X - 10X\", \"< 2X\", \">= 10X\", \"NO TICKET\"],\n      datasets: [{\n        data: [9454, 502, 24235, 8, 535516],\n        backgroundColor: [\"#82b76e\", \"#82b76e\", \"#82b76e\", \"#82b76e\", \"#82b76e\"]\n      }]\n    },\n    options: {\n      tooltips: {\n        enabled: false\n      },\n      responsive: true,\n      legend: {\n        display: false,\n        position: 'bottom',\n        fullWidth: true,\n        labels: {\n          boxWidth: 10,\n          padding: 50\n        }\n      },\n      scales: {\n        yAxes: [{\n          barPercentage: 0.75,\n          ticks: {\n            fontColor: '#555759',\n            fontFamily: 'Lato',\n            fontSize: 11\n          }\n        }],\n        xAxes: [{\n          gridLines: {\n            display: true,\n            drawTicks: false,\n            tickMarkLength: 5,\n            drawBorder: false\n          },\n          ticks: {\n            padding: 5,\n            beginAtZero: true,\n            fontColor: '#555759',\n            fontFamily: 'Lato',\n            fontSize: 11,\n            callback: function callback(label, index, labels) {\n              return label / 1000;\n            }\n          }\n        }]\n      }\n    }\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/leveraging.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/leveraging.js"]();
/******/ 	
/******/ })()
;